buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

plugins {
    id 'java'
}

group 'kr.sm.itaewon'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

bootJar {
    baseName = 'gs-spring-boot-docker'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.1.6.RELEASE'
    //compile 'io.jsonwebtoken:jjwt-api:0.10.5'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
    compile group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.2.0.RELEASE'

//    compile ('org.springframework.boot:spring-boot-starter-data-redis') {
//        exclude group: 'io.lettuce', module: 'lettuce-core'
//    }
// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

//    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp
//    compile group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '2.1.3.RELEASE'

    implementation 'com.google.firebase:firebase-admin:6.8.1'

    compile 'org.projectlombok:lombok:1.18.8'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.12.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'

    // https://mvnrepository.com/artifact/org.geolatte/geolatte-common
    compile group: 'org.geolatte', name: 'geolatte-common', version: '0.8'

    // https://mvnrepository.com/artifact/org.geolatte/geolatte-geojson
    compile group: 'org.geolatte', name: 'geolatte-geojson', version: '1.4.0'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-spatial
    compile group: 'org.hibernate', name: 'hibernate-spatial', version: '5.4.3.Final'
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.2.Final'


// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.8'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.8'

// https://mvnrepository.com/artifact/org.locationtech.jts/jts-core
    compile group: 'org.locationtech.jts', name: 'jts-core', version: '1.16.1'
// https://mvnrepository.com/artifact/org.geolatte/geolatte-geom
    compile group: 'org.geolatte', name: 'geolatte-geom', version: '1.4.0'

    runtime 'org.postgresql:postgresql:42.2.5'

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile "org.powermock:powermock-module-junit4:1.6.4"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.4"
    testCompile "org.powermock:powermock-api-mockito:1.6.4"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.4"
    
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}